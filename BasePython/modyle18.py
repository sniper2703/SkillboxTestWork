# Пользователь вводит числа A и B. Напишите программу, которая генерирует два списка: в первом лежат кубы чисел в диапазоне от А до В,
# во втором — квадраты чисел в этом же диапазоне.
# Выведите списки на экран. Для генерации используйте list comprehensions (как и в следующих задачах).
# Пример:
# Левая граница: 5
# Правая граница: 10
# Список кубов чисел в диапазоне от 5 до 10: [125, 216, 343, 512, 729, 1000]
# Список квадратов чисел в диапазоне от 5 до 10: [25, 36, 49, 64, 81, 100]
#
# a = int(input("Левая граница: "))
# b = int(input("Правая граница: "))
#
# first_list = [x ** 3 for x in range(a, b+1)]
# second_list = [x ** 2 for x in range(a, b+1)]
#
# print(f"Список кубов чисел в диапазоне от {a} до {b}: {first_list}")
# print(f"Список квадратов чисел в диапазоне от {a} до {b}: {second_list}")
# ---------------------------------------------------------------------------------------------------------------------
# Пользователь вводит два числа: А и В. Реализуйте код, который генерирует список из чётных чисел в диапазоне от А до B.
# Используйте list comprehensions (как и в следующих задачах).
#
# a = int(input("Левая граница: "))
# b = int(input("Правая граница: "))
#
# first_list = [x for x in range(a, b+1) if x % 2 == 0]
#
# print(first_list)
# ----------------------------------------------------------------------------------------------------------------------
# def is_palindrome(num_list):
#     reverse_list = num_list[::-1]
#     if num_list == reverse_list:
#         return True
#     else:
#         return False
#
# nums = [1, 2, 3, 4, 5]
# answer = []
#
# for i_nums in range(0, len(nums)):
#     if is_palindrome(nums[i_nums:len(nums)]):
#         answer = nums[:i_nums]
#         answer.reverse()
#         break
#     new_nums = []
#
# print("Исходный список:", nums)
# print("Нужно чисел для полиндрома:", len(answer))
# print("Список этих чисел:", answer)
# ----------------------------------------------------------------------------------------------------------------------
# word = "Привет"
# first_part = word[:len(word) // 2]
# print(first_part[::-1])
#
# second_part = word[len(word) // 2:]
# print(second_part[::-1])
#
# print(first_part[::-1] + second_part[::-1])
# ---------------------------------------------------------------------------------------------------------------------
#
# Напишите программу, которая запрашивает у пользователя текст и генерирует список из гласных букв этого текста (сама строка вводится на русском языке).
# Выведите в консоль список и его длину.
# Пример:
# Введите текст: Нужно отнести кольцо в Мордор!
# Список гласных букв: ['у', 'о', 'о', 'е', 'и', 'о', 'о', 'о', 'о']
# Длина списка: 9
#
# my_string = input("Введите текст: ")
#
# glas_sim = [my_string[i] for i in range(len(my_string)) if my_string[i] == "а" or my_string[i] == "е"
#             or my_string[i] == "и" or my_string[i] == "о" or my_string[i] == "у" or my_string[i] == "э"
#             or my_string[i] == "я" or my_string[i] == "ю"]
# print(f"Список гласных букв: {glas_sim}")
# print(f"Длина списка: {len(glas_sim)}")
# ----------------------------------------------------------------------------------------------------------------------
# Пользователь вводит целое число N. Напишите программу, которая генерирует список из N чисел.
# На чётных местах в нём стоят единицы, а на нечётных — числа, равные остатку от деления своего номера на 5.
# Пример:
# Введите длину списка: 10
# Результат: [1, 1, 1, 3, 1, 0, 1, 2, 1, 4]
#
# len_list = int(input("Введите длину списка: "))
#
# my_list = [(1 if i % 2 == 0 else i % 5) for i in range(len_list)]
# print("Результат:", my_list)
# -----------------------------------------------------------------------------------------------------------------------
#
# Мы хотим протестировать работу электронной таблицы для участников некоторых соревнований.
# Есть два списка (то есть две команды), по 20 участников в каждом.
# В этих списках хранятся очки каждого участника (вещественные числа с двумя знаками после точки, например, 4.03).
# Участник одной команды соревнуется с участником другой команды под таким же номером.
# То есть первый соревнуется с первым, второй — со вторым и так далее.
# Напишите программу, которая генерирует два списка участников (по 20 элементов) из случайных вещественных чисел (от 5 до 10).
# Для этого найдите подходящую функцию из модуля random. Далее сгенерируйте третий список, в котором окажутся только победители из каждой пары.
# Пример:
# Первая команда: [7.86, 6.76, 9.97, 9.08, 5.45, 6.9, 8.65, 5.17, 8.17, 5.06, 7.56, 7.1, 7.18, 8.25, 5.53, 7.95, 8.91, 7.11, 8.29, 9.52]
# Вторая команда: [7.13, 5.7, 8.89, 5.36, 5.62, 9.46, 5.82, 8.67, 8.41, 7.0, 5.31, 7.8, 9.93, 7.76, 7.4, 8.26, 7.94, 5.71, 7.89, 7.77]
# Победители тура: [7.86, 6.76, 9.97, 9.08, 5.62, 9.46, 8.65, 8.67, 8.41, 7.0, 7.56, 7.8, 9.93, 8.25, 7.4, 8.26, 8.91, 7.11, 8.29, 9.52]
#
# import random
#
# first_tima = [round(random.uniform(5.0, 10.0), 2) for _ in range(20)]
# second_tima = [round(random.uniform(5.0, 10.0), 2) for _ in range(20)]
# win_list = [(first_tima[i] if first_tima[i] > second_tima[i] else second_tima[i]) for i in range(20)]
#
# print("Первая команда:", first_tima)
# print("Вторая команда:", second_tima)
# print("Победители тура:", win_list)
# ----------------------------------------------------------------------------------------------------------------------
#
# ана строка, в которой хранятся первые семь букв английского алфавита.
# alphabet = 'abcdefg'
# Напишите программу, которая выводит на экран десять следующих результатов:
# Копию строки.
# Элементы строки в обратном порядке.
# Каждый второй элемент строки (включая самый первый).
# Каждый второй элемент строки после первого.
# Все элементы до второго.
# Все элементы, начиная с конца, до предпоследнего.
# Все элементы в диапазоне индексов от 3 до 4 (не включая 4).
# Последние три элемента строки.
# Все элементы в диапазоне индексов от 3 до 4.
# То же, что и в предыдущем пункте, но в обратном порядке.
# Для получения и вывода результатов используйте только команду print и срезы.
# Результаты работы программы:
# 1: abcdefg
# 2: gfedcba
# 3: aceg
# 4: bdf
# 5: a
# 6: g
# 7: d
# 8: efg
# 9: de
# 10: ed
#
# alphabet = 'abcdefg'
# print(alphabet[:])
# print(alphabet[::-1])
# print(alphabet[::2])
# print(alphabet[1::2])
# print(alphabet[:1])
# print(alphabet[:1:-1])
# print(alphabet[3:4])
# print(alphabet[:-3:-1])
# print(alphabet[4:3:-1])
# ---------------------------------------------------------------------------------------------------------------------
#
# На вход в программу подаётся строка, в которой буква h встречается как минимум два раза.
# Реализуйте код, который разворачивает последовательность символов, заключённую между первым и последним появлением буквы h, в противоположном порядке.
# Пример 1:
# Введите строку: hqwehrty
# Развёрнутая последовательность между первым и последним h: ewq.
# Пример 2:
# Введите строку: hh
# Развёрнутая последовательность между первым и последним h:
# Пример 3:
# Введите строку: hhqwerh
# Развёрнутая последовательность между первым и последним h: rewqh.
#
# my_string = input("Введите строку: ")
# x = [i for i, ltr in enumerate(my_string) if ltr == "h"]
# new_string = my_string[x[1]-1:x[0]:-1]
# print(new_string)
# ----------------------------------------------------------------------------------------------------------------------
#
# Дан такой (уже многомерный!) список:
# nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]
# Напишите код, который «раскрывает» все вложенные списки, то есть оставляет только внешний список. Для решения используйте только list comprehensions.
# Ответ: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
#
# nice_list = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]]
# output = [digit for each_list in nice_list for each_list2 in each_list for digit in each_list2]
# print(output)
# ----------------------------------------------------------------------------------------------------------------------
#
# Юлий Цезарь использовал свой способ шифрования текста. Каждая буква заменялась на следующую по алфавиту через K позиций по кругу.
# Если K = 3, то в слове на основе русского алфавита, которое мы хотим зашифровать, буква «А» станет буквой «Г», «Б» станет «Д» и так далее.
# Пользователь вводит сообщение, а также значение сдвига. Напишите программу, которая зашифрует это сообщение при помощи шифра Цезаря.
# Пример:
# Введите сообщение: это питон.
# Введите сдвиг: 3
# Зашифрованное сообщение: ахс тлхср.

def ceaser_cipher(string, user_shift):
    char_list = [(alphabet[(alphabet.index(sym) + user_shift) % 33] if sym != ' ' else ' ') for sym in string]
    new_str = ''
    for i_char in char_list:
        new_str += i_char
    return new_str

alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
input_str = input("Введите строку: ")
shift = int(input("Введите сдвиг: "))

output_str = ceaser_cipher(input_str, shift)
print(output_str)