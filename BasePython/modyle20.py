# На вход программе поступает целое число num. Напишите программу создания словаря, который включает в себя ключи от 1 до num,
# а значениями соответствующего ключа будет значение ключа в квадрате.
# Пример:
# Введите целое число: 5
# Результат: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
#
# num = int(input("Введите целое число: "))
# squer_dict = dict()
#
# for i in range(1, num+1):
#     squer_dict[i] = i ** 2
#     i += 1
# print(squer_dict)
# ---------------------------------------------------------------------------------------------------------------------
# Пользователь вводит фамилию, имя студента, город проживания, вуз, в котором он учится, и все его оценки.
# Всё вводится в одну строку через пробел. Напишите программу, которая по этой информации составит словарь и выведет его на экран.
# Пример:
# Введите информацию о студенте через пробел (имя, фамилия, город, место учёбы, оценки): Илья Иванов Москва МГУ 5 4 4 4 5
# Результат:
# Имя - Илья
# Фамилия - Иванов
# Город - Москва
# Место учёбы - МГУ
# Оценки - [5, 4, 4, 4, 5]
#
# student_str = input(
#     "Введите информацию о студенте через пробел\n"
#     "(имя, фамилия, город, место учебы, оценки): "
# )
#
# student_info = student_str.split()
# student = dict()
# student["Имя"] = student_info[0]
# student["Фамилия"] = student_info[1]
# student["Город"] = student_info[2]
# student["Место учебы"] = student_info[3]
# student["Оценки"] = [int(i_grade) for i_grade in student_info[4:]]
#
# for i_info in student:
#     print(f"{i_info} - {student[i_info]}")
# -------------------------------------------------------------------------------------------------------------------
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается каждый символ.
# На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту, а также максимальное значение частоты.
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3
#
# def histogram(string):
#     sym_dict = dict()
#     for sym in string:
#         if sym in sym_dict:
#             sym_dict[sym] += 1
#         else:
#             sym_dict[sym] = 1
#     return sym_dict
#
# text = input("Введите текст: ").lower()
# hist = histogram(text)
#
# for i_sym in sorted(hist.keys()):
#     print(f"{i_sym} : {hist[i_sym]}")
# print("Максимальная частота:", max(hist.values()))
# ---------------------------------------------------------------------------------------------------------------------
# У мебельного магазина есть два склада, на которых хранятся разные категории товаров по парам «название — количество»:
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage).
# После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage),
# затем запрашивает у пользователя название товара и выводит на экран его количество.
# Если такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.
#
# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# big_storage.update(small_storage)
#
# product = input("Введите нужный товар: ")
#
# search = big_storage.get(product)
#
# print(big_storage)
# print(f"Количество товара {product}",search)
# ---------------------------------------------------------------------------------------------------------------------
# Есть готовый словарь игроков, у каждого игрока есть имя, команда, в которой он играет,
# а также его текущий статус, в котором указано, отдыхает он, тренируется или путешествует:
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
# Напишите программу, которая выводит на экран вот такие данные в разных строчках:
# Все члены команды из команды А, которые отдыхают.
# Все члены команды из группы B, которые тренируются.
# Все члены команды из команды C, которые путешествуют.
#
# def team_info_players(dir, team, status):
#     team_members = [
#         player['name']
#         for player in dir.values()
#         if player['team'] == team and player['status'] == status
#     ]
#     print(f"Все члены команды из команды {team}, которые {status}\n", team_members)
#
# players_dict = {
#     1: {'name': 'Vanya', 'team': 'A', 'status': 'Rest'},
#     2: {'name': 'Lena', 'team': 'B', 'status': 'Training'},
#     3: {'name': 'Maxim', 'team': 'C', 'status': 'Travel'},
#     4: {'name': 'Egor', 'team': 'C', 'status': 'Rest'},
#     5: {'name': 'Andrei', 'team': 'A', 'status': 'Training'},
#     6: {'name': 'Sasha', 'team': 'A', 'status': 'Rest'},
#     7: {'name': 'Alina', 'team': 'B', 'status': 'Rest'},
#     8: {'name': 'Masha', 'team': 'C', 'status': 'Travel'}
# }
# team_info_players(players_dict, 'A', 'Rest')
# team_info_players(players_dict, 'B', 'Training')
# team_info_players(players_dict, 'C', 'Travel')
# --------------------------------------------------------------------------------------------------------------------
# Мы продолжаем писать приложение для удобного прослушивания музыки, но теперь наши песни хранятся в виде словаря,
# а не вложенных списков. Каждая песня состоит из названия и продолжительности с точностью до долей минут.
# violator_songs = {
#     'World in My Eyes': 4.86,
#     'Sweetest Perfection': 4.43,
#     'Personal Jesus': 4.56,
#     'Halo': 4.9,
#     'Waiting for the Night': 6.07,
#     'Enjoy the Silence': 4.20,
#     'Policy of Truth': 4.76,
#     'Blue Dress': 4.29,
#     'Clean': 5.83
# }
# Напишите программу, которая запрашивает у пользователя количество песен из списка и затем названия этих песен,
# а на экран выводит общее время их звучания.
# Пример:
# Сколько песен выбрать? 3
# Название 1 песни: Halo
# Название 2 песни: Enjoy the Silence
# Название 3 песни: Clean
# Общее время звучания песен: 14.93 минут
#
# violator_songs = {
#     'World in My Eyes': 4.86,
#     'Sweetest Perfection': 4.43,
#     'Personal Jesus': 4.56,
#     'Halo': 4.9,
#     'Waiting for the Night': 6.07,
#     'Enjoy the Silence': 4.20,
#     'Policy of Truth': 4.76,
#     'Blue Dress': 4.29,
#     'Clean': 5.83
# }
# print("Список песен:")
# for name in violator_songs:
#     print(name)
# print()
# count_music = int(input("Сколько песен выбрать? "))
# summ_time = 0
# i = 1
#
# while i != count_music + 1:
#     name_music = input(f"Название {i} песни: ")
#     if violator_songs.get(name_music) == None:
#         print("Нет такой песни")
#     else:
#         summ_time += violator_songs[name_music]
#         i += 1
# print(f"Общее время звучания песен: {round(summ_time, 2)} минут")
# ----------------------------------------------------------------------------------------------------------------------
# Антон помимо программирования также увлекается и географией, поэтому он решил связать эти две области и написать для своего проекта небольшую программу-навигатор.
# Пользователь вводит количество стран N, а затем N раз вводит страну и города, которые в этой стране находятся, в одну строку.
# Затем пользователь вводит три названия городов.
# Реализуйте такую программу и для каждого из трёх городов укажите, в какой стране он находится.
# Если такого города нет, то выведите соответствующее сообщение.
# Пример:
# Кол-во стран: 2
# 1 страна: Россия Москва Петербург Новгород
# 2 страна: Германия Берлин Лейпциг Мюнхен
# 1 город: Москва
# Город Москва расположен в стране Россия.
# 2 город: Мюнхен
# Город Мюнхен расположен в стране Германия.
# 3 город: Рим
# По городу Рим данных нет.
#
# count_cantry = int(input("Кол-во стран: "))
# cantry_dict = {}
# num = 1
# my_list = []
#
# for i in range(count_cantry):
#     cantry = input(f"{i+1} страна: ").split()
#     cantry_dict[cantry[0]] = cantry[1:]
#
# while num != 4:
#     city = input(f"{num} город: ")
#     for key, value in cantry_dict.items():
#         if city in value:
#             my_list.append(key)
#     if my_list != []:
#         print(f"Город {city} расположен в стране {my_list[0]}.")
#         num += 1
#         my_list = []
#     else:
#         print(f"По городу {city} данных нет.")
# ----------------------------------------------------------------------------------------------------------------------
# В базе данных магазина вся необходимая информация по товарам делится на два словаря: первый отвечает за коды товаров,
# второй — за списки количества разнообразных товаров на складе:
# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678',
# }
# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }
# Каждая запись второго словаря отображает, сколько и по какой цене закупалось товаров (цена указана за 1 шт.).
# Напишите программу, которая рассчитывает, на какую сумму лежит каждого товара на складе, и выводит эту информацию на экран.
# Результат работы программы.
# Лампа - 27 шт, стоимость 1134 руб
# Стол - 54 шт, стоимость 27860 руб
# Диван - 3 шт, стоимость 3550 руб
# Стул - 105 шт, стоимость 10311 руб
#
# goods = {
#     'Лампа': '12345',
#     'Стол': '23456',
#     'Диван': '34567',
#     'Стул': '45678',
# }
# store = {
#     '12345': [
#         {'quantity': 27, 'price': 42},
#     ],
#     '23456': [
#         {'quantity': 22, 'price': 510},
#         {'quantity': 32, 'price': 520},
#     ],
#     '34567': [
#         {'quantity': 2, 'price': 1200},
#         {'quantity': 1, 'price': 1150},
#     ],
#     '45678': [
#         {'quantity': 50, 'price': 100},
#         {'quantity': 12, 'price': 95},
#         {'quantity': 43, 'price': 97},
#     ],
# }
#
# for key in goods:
#     code = goods[key]
#     store_item = store[code]
#     summ_quantity = 0
#     itog = 0
#     for i in range(len(store_item)):
#         summ_quantity += store_item[i]['quantity']
#         itog += store_item[i]['quantity'] * store_item[i]['price']
#     print(f"{key} - {summ_quantity} шт, стоимость {itog} руб")
# -----------------------------------------------------------------------------------------------------------------------
# Пользователь вводит строку. Необходимо написать программу, которая определяет, существует ли у этой строки такая перестановка,
# при которой она станет палиндромом. Выведите соответствующее сообщение.
# Пример 1:
# Введите строку: aab
# Можно сделать палиндромом
# Пример 2:
# Введите строку: aabc
# Нельзя сделать палиндромом

def is_poly(string):
    char_dict = {}
    for i_sym in string:
        char_dict[i_sym] = char_dict.get(i_sym, 0) + 1

    odd_count = 0
    for i_value in char_dict.values():
        if i_value % 2 != 0:
            odd_count += 1

    return odd_count <= 1

my_string = input("Введите строку: ")
if is_poly(my_string):
    print("Можно сделать палиндромом")
else:
    print("Нельзя сделать палиндромом")